{"ast":null,"code":"var _jsxFileName = \"/home/lois/Sites/compound_catalogue/frontend/src/Compound.js\";\nimport React from 'react';\nimport { useQuery } from 'react-apollo';\nimport { gql } from 'apollo-boost';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Paper from '@material-ui/core/Paper';\nconst QUERY_COMPOUNDS = gql`\n  query {\n    compounds\t{\n      compoundId\n      molecularFormula\n      molecularWeight\n    }\n  }\n`;\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650\n  }\n});\nexport function CompoundInfo() {\n  // Polling: provides near-real-time synchronization with\n  // your server by causing a query to execute periodically\n  // at a specified interval\n  const {\n    data,\n    loading\n  } = useQuery(QUERY_COMPOUNDS, {\n    pollInterval: 500 // refetch the result every 0.5 second\n\n  });\n  const classes = useStyles();\n  const headCells = [{\n    id: 'name',\n    numeric: false,\n    disablePadding: true,\n    label: 'Dessert (100g serving)'\n  }, {\n    id: 'calories',\n    numeric: true,\n    disablePadding: false,\n    label: 'Calories'\n  }, {\n    id: 'fat',\n    numeric: true,\n    disablePadding: false,\n    label: 'Fat (g)'\n  }, {\n    id: 'carbs',\n    numeric: true,\n    disablePadding: false,\n    label: 'Carbs (g)'\n  }, {\n    id: 'protein',\n    numeric: true,\n    disablePadding: false,\n    label: 'Protein (g)'\n  }];\n  const [order, setOrder] = React.useState('asc');\n  const [orderBy, setOrderBy] = React.useState('calories');\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const createSortHandler = property => event => {\n    handleRequestSort(event, property);\n  }; // should handle loading status\n\n\n  if (loading) return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 23\n    }\n  }, \"Loading...\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TableContainer, {\n    component: Paper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    className: classes.table,\n    \"aria-label\": \"simple table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, headCells.map(headCell => /*#__PURE__*/React.createElement(TableCell, {\n    key: headCell.id,\n    align: headCell.numeric ? 'right' : 'left',\n    padding: headCell.disablePadding ? 'none' : 'default',\n    sortDirection: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TableSortLabel, {\n    active: true,\n    direction: 'asc',\n    onClick: createSortHandler(headCell.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }\n  }, headCell.label))))), /*#__PURE__*/React.createElement(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, data.compounds.map(({\n    compoundId,\n    molecularFormula,\n    molecularWeight\n  }) => /*#__PURE__*/React.createElement(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, compoundId), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }, molecularFormula), /*#__PURE__*/React.createElement(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }\n  }, molecularWeight)))))));\n}","map":{"version":3,"sources":["/home/lois/Sites/compound_catalogue/frontend/src/Compound.js"],"names":["React","useQuery","gql","makeStyles","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","TableSortLabel","Paper","QUERY_COMPOUNDS","useStyles","table","minWidth","CompoundInfo","data","loading","pollInterval","classes","headCells","id","numeric","disablePadding","label","order","setOrder","useState","orderBy","setOrderBy","handleRequestSort","event","property","isAsc","createSortHandler","map","headCell","compounds","compoundId","molecularFormula","molecularWeight"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useQuery } from 'react-apollo';\nimport { gql } from 'apollo-boost';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\nimport Paper from '@material-ui/core/Paper';\n\nconst QUERY_COMPOUNDS = gql`\n  query {\n    compounds\t{\n      compoundId\n      molecularFormula\n      molecularWeight\n    }\n  }\n`;\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n});\n\nexport function CompoundInfo() {\n  // Polling: provides near-real-time synchronization with\n  // your server by causing a query to execute periodically\n  // at a specified interval\n  const { data, loading } = useQuery(\n    QUERY_COMPOUNDS, {\n      pollInterval: 500 // refetch the result every 0.5 second\n    }\n  );\n\n  const classes = useStyles();\n\n  const headCells = [\n    { id: 'name', numeric: false, disablePadding: true, label: 'Dessert (100g serving)' },\n    { id: 'calories', numeric: true, disablePadding: false, label: 'Calories' },\n    { id: 'fat', numeric: true, disablePadding: false, label: 'Fat (g)' },\n    { id: 'carbs', numeric: true, disablePadding: false, label: 'Carbs (g)' },\n    { id: 'protein', numeric: true, disablePadding: false, label: 'Protein (g)' },\n  ];\n\n\n  const [order, setOrder] = React.useState('asc');\n  const [orderBy, setOrderBy] = React.useState('calories');\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const createSortHandler = (property) => (event) => {\n    handleRequestSort(event, property);\n  };\n\n  // should handle loading status\n  if (loading) return <p>Loading...</p>;\n\n  return (\n    <div>\n      <TableContainer component={Paper}>\n        <Table className={classes.table} aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n            {headCells.map((headCell) => (\n              <TableCell\n                key={headCell.id}\n                align={headCell.numeric ? 'right' : 'left'}\n                padding={headCell.disablePadding ? 'none' : 'default'}\n                sortDirection={false}\n              >\n                <TableSortLabel\n                  active={true}\n                  direction={'asc'}\n                  onClick={createSortHandler(headCell.id)}\n                >\n                  {headCell.label}\n                </TableSortLabel>\n              </TableCell>\n            ))}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {data.compounds.map(({ compoundId, molecularFormula, molecularWeight }) => (\n              <TableRow>\n                <TableCell>{compoundId}</TableCell>\n                <TableCell>{molecularFormula}</TableCell>\n                <TableCell>{molecularWeight}</TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}